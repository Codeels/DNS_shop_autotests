{"uid":"976bfa2296c14779","name":"Тест 1","fullName":"test#test_1","historyId":"481c50c2a0ce3c4af0e5e11c30040d79","time":{"start":1679256708884,"stop":1679256728394,"duration":19510},"description":"Тест 1","descriptionHtml":"<p>Тест 1</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Не удалось изменить количество товара\nMessage: unexpected alert open: {Alert text : Не удалось изменить количество товара}\n  (Session info: headless chrome=111.0.5563.64)\nStacktrace:\n#0 0x563cc067e243 <unknown>\n#1 0x563cc04427a6 <unknown>\n#2 0x563cc04b8e68 <unknown>\n#3 0x563cc049fe53 <unknown>\n#4 0x563cc04729ea <unknown>\n#5 0x563cc0473b2e <unknown>\n#6 0x563cc06d2d5e <unknown>\n#7 0x563cc06d6a80 <unknown>\n#8 0x563cc06b88b0 <unknown>\n#9 0x563cc06d7b63 <unknown>\n#10 0x563cc06a9f75 <unknown>\n#11 0x563cc06fa998 <unknown>\n#12 0x563cc06fab27 <unknown>\n#13 0x563cc0715c23 <unknown>\n#14 0x7f27ea5cbb43 <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9954f36fb48d9fe2e21cf033656f3bd8\")>\n\n    @allure.title(\"Тест 1\")\n    @allure.description('Тест 1')\n    @pytest.mark.flaky(reruns=2, reruns_delay=5)\n    def test_1(driver):\n        # авторизация\n        mp = MainPage(driver)\n        mp.log_in(login, password, main=True)\n    \n        # очистка корзины и страницы сравнения от товаров\n>       mp.clear_cart_and_comparison(driver, CartPage, ComparisonPage)\n\ntest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:202: in clear_cart_and_comparison\n    comparison_page.delete_products_in_comparison()\npages/comparison_page.py:94: in delete_products_in_comparison\n    if self.element_is_present(self.button_delete_products):\npages/base_page.py:190: in element_is_present\n    self.driver.find_element(By.XPATH, locator)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:861: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff85d161630>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Не удалось изменить количество товара\"},\"error\":\"unexpected alert ...\\\\n#12 0x563cc06fab27 \\\\u003Cunknown>\\\\n#13 0x563cc0715c23 \\\\u003Cunknown>\\\\n#14 0x7f27ea5cbb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Не удалось изменить количество товара\nE           Message: unexpected alert open: {Alert text : Не удалось изменить количество товара}\nE             (Session info: headless chrome=111.0.5563.64)\nE           Stacktrace:\nE           #0 0x563cc067e243 <unknown>\nE           #1 0x563cc04427a6 <unknown>\nE           #2 0x563cc04b8e68 <unknown>\nE           #3 0x563cc049fe53 <unknown>\nE           #4 0x563cc04729ea <unknown>\nE           #5 0x563cc0473b2e <unknown>\nE           #6 0x563cc06d2d5e <unknown>\nE           #7 0x563cc06d6a80 <unknown>\nE           #8 0x563cc06b88b0 <unknown>\nE           #9 0x563cc06d7b63 <unknown>\nE           #10 0x563cc06a9f75 <unknown>\nE           #11 0x563cc06fa998 <unknown>\nE           #12 0x563cc06fab27 <unknown>\nE           #13 0x563cc0715c23 <unknown>\nE           #14 0x7f27ea5cbb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:248: UnexpectedAlertPresentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1679256685695,"stop":1679256708868,"duration":23173},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Тест 1","status":"broken","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Не удалось изменить количество товара\nMessage: unexpected alert open: {Alert text : Не удалось изменить количество товара}\n  (Session info: headless chrome=111.0.5563.64)\nStacktrace:\n#0 0x563cc067e243 <unknown>\n#1 0x563cc04427a6 <unknown>\n#2 0x563cc04b8e68 <unknown>\n#3 0x563cc049fe53 <unknown>\n#4 0x563cc04729ea <unknown>\n#5 0x563cc0473b2e <unknown>\n#6 0x563cc06d2d5e <unknown>\n#7 0x563cc06d6a80 <unknown>\n#8 0x563cc06b88b0 <unknown>\n#9 0x563cc06d7b63 <unknown>\n#10 0x563cc06a9f75 <unknown>\n#11 0x563cc06fa998 <unknown>\n#12 0x563cc06fab27 <unknown>\n#13 0x563cc0715c23 <unknown>\n#14 0x7f27ea5cbb43 <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9954f36fb48d9fe2e21cf033656f3bd8\")>\n\n    @allure.title(\"Тест 1\")\n    @allure.description('Тест 1')\n    @pytest.mark.flaky(reruns=2, reruns_delay=5)\n    def test_1(driver):\n        # авторизация\n        mp = MainPage(driver)\n        mp.log_in(login, password, main=True)\n    \n        # очистка корзины и страницы сравнения от товаров\n>       mp.clear_cart_and_comparison(driver, CartPage, ComparisonPage)\n\ntest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:202: in clear_cart_and_comparison\n    comparison_page.delete_products_in_comparison()\npages/comparison_page.py:94: in delete_products_in_comparison\n    if self.element_is_present(self.button_delete_products):\npages/base_page.py:190: in element_is_present\n    self.driver.find_element(By.XPATH, locator)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:861: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff85d161630>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Не удалось изменить количество товара\"},\"error\":\"unexpected alert ...\\\\n#12 0x563cc06fab27 \\\\u003Cunknown>\\\\n#13 0x563cc0715c23 \\\\u003Cunknown>\\\\n#14 0x7f27ea5cbb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Не удалось изменить количество товара\nE           Message: unexpected alert open: {Alert text : Не удалось изменить количество товара}\nE             (Session info: headless chrome=111.0.5563.64)\nE           Stacktrace:\nE           #0 0x563cc067e243 <unknown>\nE           #1 0x563cc04427a6 <unknown>\nE           #2 0x563cc04b8e68 <unknown>\nE           #3 0x563cc049fe53 <unknown>\nE           #4 0x563cc04729ea <unknown>\nE           #5 0x563cc0473b2e <unknown>\nE           #6 0x563cc06d2d5e <unknown>\nE           #7 0x563cc06d6a80 <unknown>\nE           #8 0x563cc06b88b0 <unknown>\nE           #9 0x563cc06d7b63 <unknown>\nE           #10 0x563cc06a9f75 <unknown>\nE           #11 0x563cc06fa998 <unknown>\nE           #12 0x563cc06fab27 <unknown>\nE           #13 0x563cc0715c23 <unknown>\nE           #14 0x7f27ea5cbb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:248: UnexpectedAlertPresentException","steps":[{"name":"Авторизация","time":{"start":1679256708884,"stop":1679256716830,"duration":7946},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Очистка корзины и страницы сравнения","time":{"start":1679256716831,"stop":1679256728393,"duration":11562},"status":"broken","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Не удалось изменить количество товара\nMessage: unexpected alert open: {Alert text : Не удалось изменить количество товара}\n  (Session info: headless chrome=111.0.5563.64)\nStacktrace:\n#0 0x563cc067e243 <unknown>\n#1 0x563cc04427a6 <unknown>\n#2 0x563cc04b8e68 <unknown>\n#3 0x563cc049fe53 <unknown>\n#4 0x563cc04729ea <unknown>\n#5 0x563cc0473b2e <unknown>\n#6 0x563cc06d2d5e <unknown>\n#7 0x563cc06d6a80 <unknown>\n#8 0x563cc06b88b0 <unknown>\n#9 0x563cc06d7b63 <unknown>\n#10 0x563cc06a9f75 <unknown>\n#11 0x563cc06fa998 <unknown>\n#12 0x563cc06fab27 <unknown>\n#13 0x563cc0715c23 <unknown>\n#14 0x7f27ea5cbb43 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/DNS_shop_autotests/DNS_shop_autotests/pages/base_page.py\", line 202, in clear_cart_and_comparison\n    comparison_page.delete_products_in_comparison()\n  File \"/home/runner/work/DNS_shop_autotests/DNS_shop_autotests/pages/comparison_page.py\", line 94, in delete_products_in_comparison\n    if self.element_is_present(self.button_delete_products):\n  File \"/home/runner/work/DNS_shop_autotests/DNS_shop_autotests/pages/base_page.py\", line 190, in element_is_present\n    self.driver.find_element(By.XPATH, locator)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 861, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 248, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n","steps":[{"name":"Переход в корзину","time":{"start":1679256716831,"stop":1679256726090,"duration":9259},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"4b1cfb00127194a9","name":"stdout","source":"4b1cfb00127194a9.txt","type":"text/plain","size":29},{"uid":"be9bf4a99ef383ef","name":"stderr","source":"be9bf4a99ef383ef.txt","type":"text/plain","size":159}],"parameters":[],"stepsCount":3,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1679256728486,"stop":1679256728546,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"flaky(reruns=2, reruns_delay=5)"},{"name":"suite","value":"test"},{"name":"host","value":"fv-az402-779"},{"name":"thread","value":"2482-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["flaky(reruns=2, reruns_delay=5)"]},"source":"976bfa2296c14779.json","parameterValues":[]}